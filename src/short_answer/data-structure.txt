***ANSWER ALL OF THE QUESTIONS BELOW***

Why do we need data structure?
Answer: We need a data structure as it provides a way to organize, manage, and store data efficiently.

What are the various operations that can be performed on different data structures?
Answer: Searching, Sorting, Insertion, Deletion, Traversal

When would we use data structures in the real world?
Answer: We would use data structures for databases & software development in the real world.

What is an Array?
Answer: An array is a container object that holds a fixed number of values of single type. The length
of an array is established when the array is created. After creation, its length is fixed.

What is the difference between Array and ArrayList?
Answer: Array is a fixed length data structure whereas Arraylist is a variable length collection class.

What is a LinkedList?
Answer: Ordered collection that contains many objects of the same type.

How is an Array different from LinkedList?
Answer: An array is a collection of elements of a similiar data type. A linked list is a collection
of objects known as a node where node consists of two parts.

What is a Queue?
Answer: Queue is a collection of orderded objects.

What is a Stack (referring to data structures)?
Answer: A linear data structure which follows a particular order in which the operations are performed.

What is FIFO and LIFO?
Answer: FIFO is a method for handling data structures where the first element is processed first and
the newest element is processed last. LIFO is the opposite FIFO, LIFO is last in first out.

Explain Big O Notation?
Answer: it's a way to measure an algorithm's efficiency. it measures the time it takes to run a function
as the input grows

What is the best case to search an element from an array?
Answer: when the element is found at the beginning of the array

What is the worst case to search an element from an array?
Answer: when the search item appears at the end of the list or not at all.

Describe what a tree data structure is?
Answer: a tree data structure is defined as a collection of objects or entities known as nodes that are
linked together to represent or simulate hierarchy. its a non-linear data structure because it doesnt store
in a sequential manner.

Describe what a graph data structure is?
Answer: its a non-linear data structure consisting of vertices also called nodes and edges. each vertex
is connected to another vertex using links called edges.

What is the difference between the HashTable and HashMap?
Answer: HashMap is non synchronized whereas HashTable is synchronized. HashTable is thread safe and can be shared
between multiple threads but HashMap cant be shared between multiple threads without proper synchronization.

How do HashMaps work in Java? How do they store values, and when are they useful?
Answer:It provides the basic implementation of the Map interface of Java. it stores the data in
(key, value) pairs, and you can access them by an index of another type.

What is ArrayIndexOutOfBoundsException in java? When does it occur?
Answer:whenever we are trying to access any item of an array at an index which is not present in the array


What are the different ways of copying an array into another array?
Answer:using variable assignment, create a new array of the same length and copy each element,
use the clone method of the array

What is DFS and BFS?
Answer:DFS: Depth Fist Search- uses stack to find the shortest path
BFS: Breadth Fist Search- uses a Queue to find the shortest path

What is Recursion?
Answer: the process in which a funcion calls itself directly or indirectly

What are linear and non-linear data Structures?
Answer:linear data structures have elements arranged sequentially
non linear data structures have complex relationships between elements

Outline different sorting algorithms and their time complexities:

    Best        Avg         Worst
Selection Sort	Ω(n^2)	    θ(n^2)	    O(n^2)
Bubble Sort 	Ω(n)	    θ(n^2)	    O(n^2)
Insertion Sort	Ω(n)	    θ(n^2)	    O(n^2)
Heap Sort	    Ω(n log(n))	θ(n log(n))	O(n log(n))
Quick Sort	    Ω(n log(n))	θ(n log(n))	O(n^2)
Merge Sort	    Ω(n log(n))	θ(n log(n))	O(n log(n))
Bucket Sort     Ω(n+k)	    θ(n+k)	    O(n^2)
Radix Sort	    Ω(nk)	    θ(nk)	    O(nk)
Count Sort      Ω(n+k)	    θ(n+k)	    O(n+k)